# Just setting the name of our action
name: Deploy

on:
  push:
    tags:
      # Regex for a version number such as v0.2.1
      - "v[0-9]+.[0-9]+.[0-9]+"

# Write permission are required to upload build artifact as release.
permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and Upload
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        # The default profile contains both rustfmt and clippy.
        run: |
          rustup toolchain install stable --profile default --no-self-update --target ${{ matrix.target }}

      - name: Test code
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose

      - name: Lint code
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          binary_name="pstate_update"
          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          cp "${binary_name}.service" "$dirname"
          cp "config.toml" "$dirname"
          tar -czf "${dirname}.tar.gz" "$dirname"
          echo "ASSET=${dirname}.tar.gz" >> $GITHUB_ENV

      - name: Upload the binaries
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.ASSET }}
