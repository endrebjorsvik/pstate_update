# Just setting the name of our action
name: CI workflow

on: push

env:
  BINARY_NAME: pstate_update

jobs:
  test-and-build:
    name: Test and build project
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        # The default profile contains both rustfmt and clippy.
        run: |
          rustup toolchain install stable --profile default --no-self-update --target ${{ matrix.target }}

      - name: Test code
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose

      - name: Lint code
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Build archive
        id: archive-builder
        shell: bash
        run: |
          dirname="${{ env.BINARY_NAME }}-${{ matrix.target }}"
          mkdir "$dirname"
          mv "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}" "$dirname"
          cp "${{ env.BINARY_NAME }}.service" "$dirname"
          cp "config.toml" "$dirname"
          tar -czf "${dirname}.tar.gz" "$dirname"
          echo "ASSET=${dirname}.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        env:
          ASSET: ${{ steps.archive-builder.outputs.ASSET }}
        with:
          name: binary-${{ matrix.target }}
          path: ${{ env.ASSET }}
          if-no-files-found: error

  release-binaries:
    name: Upload binaries to GitHub Releases page
    runs-on: ubuntu-latest
    needs: test-and-build
    # Write permission are required to upload build artifact as release.
    permissions:
      contents: write
    # TODO: Possibly a better way to do this?
    if: startsWith(github.ref, 'refs/tags/v')

    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
          - target: x86_64-unknown-linux-gnu

    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: binary-${{ matrix.target }}

      - name: Rename artifacts
        id: file-renamer
        shell: bash
        run: |
          src="${{ env.BINARY_NAME }}-${{ matrix.target }}.tar.gz"
          dest="${{ env.BINARY_NAME }}-${{ github.ref_name }}-${{ matrix.target }}.tar.gz"
          mv "$src" "$dest"
          echo "FILENAME=$dest" >> "$GITHUB_OUTPUT"

      - name: Upload the binaries
        uses: softprops/action-gh-release@v1
        env:
          FILENAME: ${{ steps.file-renamer.outputs.FILENAME }}
        with:
          fail_on_unmatched_files: true
          files: ${{ env.FILENAME }}
